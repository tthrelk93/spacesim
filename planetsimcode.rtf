{\rtf1\ansi\ansicpg1252\cocoartf2706
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red199\green203\blue211;\red52\green54\blue66;\red208\green208\blue220;
\red39\green40\blue50;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red212\green20\blue102;
\red226\green131\blue14;}
{\*\expandedcolortbl;;\cssrgb\c81961\c83529\c85882;\cssrgb\c26667\c27451\c32941;\cssrgb\c85098\c85098\c89020;
\cssrgb\c20392\c20784\c25490;\cssrgb\c100000\c100000\c100000\c50196;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c100000;\cssrgb\c87451\c18824\c47451;
\cssrgb\c91373\c58431\c4706;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sa400\partightenfactor0

\f0\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Sure, in a more accurate model, the Moon's orbit is inclined by about 5.14 degrees with respect to the ecliptic plane, and its orbit is an ellipse, not a circle. However, for simplicity, we can still approximate the orbit as a circle, but we should take the inclination into account.\
The inclination means that the Moon's velocity has a component not only in the ecliptic plane (x-z plane in your model), but also along the y-axis. We can calculate the components of the Moon's velocity as follows:\
\pard\pardeftab720\partightenfactor0

\fs18 \cf4 \cb5 \strokec4 cpp\cb1 \
\pard\pardeftab720\qc\partightenfactor0

\fs24 \cf4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb5 Copy code
\f1\fs21 \cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb7 \strokec6 // Convert the Moon's inclination from degrees to radians\cf8 \strokec8  \cf9 \strokec9 double\cf8 \strokec8  moon_inclination = \cf9 \strokec9 5.14\cf8 \strokec8  * M_PI / \cf9 \strokec9 180.0\cf8 \strokec8 ; \cf6 \strokec6 // Calculate the components of the Moon's velocity relative to the Earth\cf8 \strokec8  \cf9 \strokec9 double\cf8 \strokec8  moon_velocity_x_relative = -moon_velocity * \cf10 \strokec10 sin\cf8 \strokec8 (M_PI / \cf9 \strokec9 2\cf8 \strokec8 ); \cf9 \strokec9 double\cf8 \strokec8  moon_velocity_y_relative = moon_velocity * \cf10 \strokec10 sin\cf8 \strokec8 (moon_inclination); \cf9 \strokec9 double\cf8 \strokec8  moon_velocity_z_relative = moon_velocity * \cf10 \strokec10 cos\cf8 \strokec8 (moon_inclination) * \cf10 \strokec10 cos\cf8 \strokec8 (M_PI / \cf9 \strokec9 2\cf8 \strokec8 ); \cf6 \strokec6 // The Moon's velocity is the vector sum of the Earth's velocity and its own velocity relative to the Earth\cf8 \strokec8  \cf9 \strokec9 double\cf8 \strokec8  moon_velocity_x = earth_velocity + moon_velocity_x_relative; \cf9 \strokec9 double\cf8 \strokec8  moon_velocity_y = moon_velocity_y_relative; \cf9 \strokec9 double\cf8 \strokec8  moon_velocity_z = earth_velocity_z + moon_velocity_z_relative;\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sa400\partightenfactor0

\f0\fs32 \cf2 \cb3 This code assumes that the Moon is initially located on the positive x-axis, and it's moving towards the positive z-axis. The y-component of the Moon's velocity is positive, which means that the Moon is moving upwards from the ecliptic plane.\
\pard\pardeftab720\partightenfactor0
\cf2 Please note that this is still a simplification of the actual motion of the Moon. The Moon's orbit is perturbed by the gravitational influences of the Sun and the other planets, and it's also affected by the non-spherical shape of the Earth. If you want to simulate the motion of the Moon more accurately, you might need to use a more complex model or a numerical method, such as the Verlet integration or the Runge-Kutta method.\
\
\
\
//    void addVenus()\{\
//        // Constants for Venus\
//        const double VENUS_MASS = 4.8675e24;  // in kilograms\
//        const double VENUS_RADIUS = 6.0518e6;  // in meters\
//        const double SUN_VENUS_DISTANCE = 1.0821e11;  // in meters\
//        double venus_velocity = 35.0e3 / scaleFactor;\
//        double venus_inclination = 3.4 * M_PI / 180.0;\
//        double venus_velocity_z = venus_velocity * sin(venus_inclination);\
//        // Set the Venus's velocity and position\
//        CelestialBody venus("Venus", VENUS_MASS, VENUS_RADIUS / scaleFactor, SUN_VENUS_DISTANCE / scaleFactor, 0, 0, 0, venus_velocity, venus_velocity_z, 4, venusRenderRadius);\
//        universe.addBody(venus);\
//    \}\
\
//    //This method is also responsible for adding earths moon. Should probably come up with a clean way of adding moons for each planet\
//    //probably store in each CelestialBody how many moons that body has and then iterate through creating a new celestial body for each moon\
//    void addEarth()\{\
//        // Constants for the Earth\
//        const double EARTH_MASS = 5.972e24;  // in kilograms\
//        const double EARTH_RADIUS = 6.371e6;  // in meters\
//          const double EARTH_SUN_DISTANCE = 1.496e11;  // in meters\
//        // Constants for the Moon\
//        const double MOON_MASS = 7.342e22;  // in kilograms\
//        const double MOON_RADIUS = 1.737e6;  // in meters\
//        // Distance from the Earth to the Moon\
//        const double EARTH_MOON_DISTANCE = 3.844e8;  // in meters\
//        // Convert velocities from km/s to m/s and scale them\
//        double earth_velocity = 29.8e3 / scaleFactor;\
//        double moon_velocity = 1.0e3 / scaleFactor;\
//        // Convert inclinations from degrees to radians\
//        double earth_inclination = 0.0 * M_PI / 180.0;\
//        // Calculate the z-velocities based on the orbital velocities and inclinations\
//        double earth_velocity_z = earth_velocity * sin(earth_inclination);\
//        // Set the Earth's velocity and position\
//        CelestialBody earth("Earth", EARTH_MASS, EARTH_RADIUS / scaleFactor, EARTH_SUN_DISTANCE / scaleFactor, 0, 0, 0, earth_velocity, earth_velocity_z, 1, earthRenderRadius);\
//        universe.addBody(earth);\
\
//        // The Moon's initial position is relative to the Earth, not the Sun\
//        double initialMoonX = (EARTH_MOON_DISTANCE + EARTH_SUN_DISTANCE) / scaleFactor;\
//        // Convert the Moon's inclination from degrees to radians\
//        double moon_inclination = 5.14 * M_PI / 180.0;\
\
//        // Calculate the components of the Moon's velocity relative to the Earth\
//        double moon_velocity_x_relative = -moon_velocity * sin(M_PI / 2);\
//        double moon_velocity_y_relative = moon_velocity * sin(moon_inclination);\
//        double moon_velocity_z_relative = moon_velocity * cos(moon_inclination) * cos(M_PI / 2);\
\
//        // The Moon's velocity is the vector sum of the Earth's velocity and its own velocity relative to the Earth\
//        double moon_velocity_x = earth_velocity + moon_velocity_x_relative;\
//        double moon_velocity_y = moon_velocity_y_relative;\
//        double moon_velocity_z = earth_velocity_z + moon_velocity_z_relative;\
\
//        CelestialBody moon("Moon", MOON_MASS, MOON_RADIUS / scaleFactor, initialMoonX, 0, 0, moon_velocity_x, moon_velocity_y, moon_velocity_z, 2, moonRenderRadius);\
//        universe.addBody(moon);\
//    \}\
\
//    void addMars()\{\
//        // Constants for Mars\
//        const double MARS_MASS = 0.64171e24;  // in kilograms\
//        const double MARS_RADIUS = 3.3895e6;  // in meters\
//        const double SUN_MARS_DISTANCE = 2.2792e11;  // in meters\
//        double mars_velocity = 24.077e3 / scaleFactor;\
//        double mars_inclination = 1.85 * M_PI / 180.0;\
//        double mars_velocity_z = mars_velocity * sin(mars_inclination);\
//        // Set the Mars's velocity and position\
//        CelestialBody mars("Mars", MARS_MASS, MARS_RADIUS / scaleFactor, SUN_MARS_DISTANCE / scaleFactor, 0, 0, 0, mars_velocity, mars_velocity_z, 5, marsRenderRadius);\
//        universe.addBody(mars);\
//    \}\
\
//    void addJupiter()\{\
//        // Constants for Jupiter\
//        const double JUPITER_MASS = 1898.19e24;  // in kilograms\
//        const double JUPITER_RADIUS = 69.911e6;  // in meters\
//        const double SUN_JUPITER_DISTANCE = 7.7857e11;  // in meters\
//        double jupiter_velocity = 13.07e3 / scaleFactor;\
//        double jupiter_inclination = 1.304 * M_PI / 180.0;\
//        double jupiter_velocity_z = jupiter_velocity * sin(jupiter_inclination);\
//        // Set the Jupiter's velocity and position\
//        CelestialBody jupiter("Jupiter", JUPITER_MASS, JUPITER_RADIUS / scaleFactor, SUN_JUPITER_DISTANCE / scaleFactor, 0, 0, 0, jupiter_velocity, jupiter_velocity_z, 6, jupiterRenderRadius);\
//        universe.addBody(jupiter);\
//    \}\
\
//    void addSaturn()\{\
//        // Constants for Saturn\
//        const double SATURN_MASS = 568.34e24;  // in kilograms\
//        const double SATURN_RADIUS = 58.232e6;  // in meters\
//        const double SUN_SATURN_DISTANCE = 1.4335e12;  // in meters\
//        double saturn_velocity = 9.68e3 / scaleFactor;\
//        double saturn_inclination = 2.485 * M_PI / 180.0;\
//        double saturn_velocity_z = saturn_velocity * sin(saturn_inclination);\
//        // Set the Saturn's velocity and position\
//        CelestialBody saturn("Saturn", SATURN_MASS, SATURN_RADIUS / scaleFactor, SUN_SATURN_DISTANCE / scaleFactor, 0, 0, 0, saturn_velocity, saturn_velocity_z, 7, saturnRenderRadius);\
//        universe.addBody(saturn);\
//    \}\
\
//    void addNeptune()\{\
//        // Constants for Neptune\
//        const double NEPTUNE_MASS = 102.413e24;  // in kilograms\
//        const double NEPTUNE_RADIUS = 24.622e6;  // in meters\
//        const double SUN_NEPTUNE_DISTANCE = 4.4951e12;  // in meters\
//        double neptune_velocity = 5.43e3 / scaleFactor;\
//        double neptune_inclination = 1.767 * M_PI / 180.0;\
//        double neptune_velocity_z = neptune_velocity * sin(neptune_inclination);\
//        // Set the Neptune's velocity and position\
//        CelestialBody neptune("Neptune", NEPTUNE_MASS, NEPTUNE_RADIUS / scaleFactor, SUN_NEPTUNE_DISTANCE / scaleFactor, 0, 0, 0, neptune_velocity, neptune_velocity_z, 9, neptuneRenderRadius);\
//        universe.addBody(neptune);\
//    \}\
\
//    void addUranus()\{\
//        // Constants for Uranus\
//        const double URANUS_MASS = 86.813e24;  // in kilograms\
//        const double URANUS_RADIUS = 25.362e6;  // in meters\
//        const double SUN_URANUS_DISTANCE = 2.8725e12;  // in meters\
//        double uranus_velocity = 6.8e3 / scaleFactor;\
//        double uranus_inclination = 0.772 * M_PI / 180.0;\
//        double uranus_velocity_z = uranus_velocity * sin(uranus_inclination);\
//        // Set the Uranus's velocity and position\
//        CelestialBody uranus("Uranus", URANUS_MASS, URANUS_RADIUS / scaleFactor, SUN_URANUS_DISTANCE / scaleFactor, 0, 0, 0, uranus_velocity, uranus_velocity_z, 8, uranusRenderRadius);\
//        universe.addBody(uranus);\
//    \}\
\
\
From the logs, it seems like the simulation is experiencing a common problem in numerical simulations known as the "slingshot effect". This happens when the timestep is too large, causing the simulation to miss the point where the planet is closest to the sun. Instead of being pulled into a closer orbit, the planet gains a large amount of velocity and is flung out of the solar system.\
\
//        // Calculate the position and size of the mini map\
//        float miniMapX = miniMapMargin;\
//        float miniMapY = h - miniMapSize - miniMapMargin;\
//        float miniMapWidth = miniMapSize;\
//        float miniMapHeight = miniMapSize;\
//        // Set up the projection matrix for the mini map\
//        glMatrixMode(GL_PROJECTION);\
//        glLoadIdentity();\
//        glOrtho(0, w, 0, h, -1, 1);\
//        // Set up the model-view matrix for the mini map\
//        glMatrixMode(GL_MODELVIEW);\
//        glLoadIdentity();\
//        gluLookAt(0, 0, 1,  // Set the camera position\
//                  0, 0, 0,  // Look at the origin\
//                  0, 1, 0);\
//        // Set the viewport for the mini map\
//        glViewport(miniMapX, miniMapY, miniMapWidth, miniMapHeight);\
\
\
}